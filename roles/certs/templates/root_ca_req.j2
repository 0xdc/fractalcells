# Inspired by:
# https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html

[ ca ]
default_ca		=	{{ certificate_authority.short_name }}_CA

[ {{ certificate_authority.short_name }}_CA ]

dir			=	{{ certificate_authority.certificate_directory }}/ca/root
certs			=	$dir/certs
crl_dir			=	$dir/crl
new_certs_dir		=	$dir/newcerts
database		=	$dir/index.txt
serial			=	$dir/serial
RANDFILE		=	$dir/private/.rand

# root key and root certs
private_key		=	$dir/private/{{ certificate_authority.short_name }}_ca.key.pem
certificate		=	$dir/certs/{{ certificate_authority.short_name }}_ca.cert.pem

# certificate revocation lists
crlnumber		=	$dir/crlnumber
crl			=	$dir/crl/ca.crl.pem
crl_extensions		=	crl_ext
default_crl_days	=	30

# hashing alg
default_md		=	sha256

name_opt		=	ca_default
cert_opt		=	ca_default

[ policy_strict ]
# root ca uses 'strict' policy
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


[ policy_loose ]
# intermediate ca uses 'loose' policy
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[req]
output_password 	=	{{ certificate_authority.root_ca_output_password }}
default_bits		=	{{ certificate_authority.root_ca_default_bits }}
attributes		=	req_attributes
prompt 			=	no
distinguished_name 	=	req_distinguished_name
default_md		=	sha256
x509_extensions		=	v3_ca

[req_distinguished_name]
countryName		=	{{ certificate_authority.country }}
stateOrProvinceName	=	{{ certificate_authority.state }}
localityName		=	{{ certificate_authority.locality }}
0.organizationName	=	{{ certificate_authority.organization }}
organizationalUnitName	=	{{ certificate_authority.organizational_unit }}
commonName		=	{{ certificate_authority.common_name }}
emailAddress		=	{{ certificate_authority.email_address }}

[ req_attributes ]
challengePassword	=	{{ certificate_authority.challenge_password }}

[ v3_ca ]
# Root certs
subjectKeyIdentifier	=	hash
authorityKeyIdentifier	=	keyid:always,issuer
basicConstraints	=	critical, CA:true
keyUsage		=	critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Intermediate certs
subjectKeyIdentifier	=	hash
authorityKeyIdentifier	=	keyid:always,issuer
basicConstraints	=	critical, CA:true, pathlen:0
keyUsage		=	critical, digitalSignature, cRLSign, keyCertSign



[ usr_cert ]
# Client certs
basicConstraints	=	CA:FALSE
nsCertType		=	client, email
nsComment		=	"Client Certificate generated by {{ certificate_authority.organization }}
subjectKeyIdentifier	=	hash
authorityKeyIdentifier	=	keyid,issuer
keyUsage		=	critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage	=	clientAuth, emailProtection

[ server_cert ]
# Server certs
basicConstraints	=	CA:FALSE
nsCertType		=	server
nsComment 		=	"Client Certificate generated by {{ certificate_authority.organization }}
subjectKeyIdentifier	=	hash
authorityKeyIdentifier	=	keyid,issuer:always
keyUsage		=	critical, digitalSignature, keyEncipherment
extendedKeyUsage	=	serverAuth

[ crl_ext ]
# CRL extension
authorityKeyIdentifier	=	keyid:always

[ ocsp ]
# OCSP signing certs
basicConstraints	=	CA:FALSE
subjectKeyIdentifier	=	hash
authorityKeyIdentifier	=	keyid,issuer
keyUsage		=	critical, digitalSignature
extendedKeyUsage	=	critical, OCSPSigning


